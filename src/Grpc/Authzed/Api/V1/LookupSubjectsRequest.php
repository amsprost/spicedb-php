<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: permission_service.proto

namespace Authzed\Api\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * LookupSubjectsRequest performs a lookup of all subjects of a particular
 * kind for which the subject has the specified permission or the relation in
 * which the subject exists, streaming back the IDs of those subjects.
 * </pre>
 *
 * Protobuf type <code>authzed.api.v1.LookupSubjectsRequest</code>
 */
class LookupSubjectsRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>.authzed.api.v1.Consistency consistency = 1;</code>
     */
    private $consistency = null;
    /**
     * <pre>
     * resource is the resource for which all matching subjects for the permission
     * or relation will be returned.
     * </pre>
     *
     * <code>.authzed.api.v1.ObjectReference resource = 2 [(.validate.rules) = {</code>
     */
    private $resource = null;
    /**
     * <pre>
     * permission is the name of the permission (or relation) for which to find
     * the subjects.
     * </pre>
     *
     * <code>string permission = 3 [(.validate.rules) = {</code>
     */
    private $permission = '';
    /**
     * <pre>
     * subject_object_type is the type of subject object for which the IDs will
     * be returned.
     * </pre>
     *
     * <code>string subject_object_type = 4 [(.validate.rules) = {</code>
     */
    private $subject_object_type = '';
    /**
     * <pre>
     * optional_subject_relation is the optional relation for the subject.
     * </pre>
     *
     * <code>string optional_subject_relation = 5 [(.validate.rules) = {</code>
     */
    private $optional_subject_relation = '';

    public function __construct() {
        \GPBMetadata\PermissionService::initOnce();
        parent::__construct();
    }

    /**
     * <code>.authzed.api.v1.Consistency consistency = 1;</code>
     */
    public function getConsistency()
    {
        return $this->consistency;
    }

    /**
     * <code>.authzed.api.v1.Consistency consistency = 1;</code>
     */
    public function setConsistency(&$var)
    {
        GPBUtil::checkMessage($var, \Authzed\Api\V1\Consistency::class);
        $this->consistency = $var;
    }

    /**
     * <pre>
     * resource is the resource for which all matching subjects for the permission
     * or relation will be returned.
     * </pre>
     *
     * <code>.authzed.api.v1.ObjectReference resource = 2 [(.validate.rules) = {</code>
     */
    public function getResource()
    {
        return $this->resource;
    }

    /**
     * <pre>
     * resource is the resource for which all matching subjects for the permission
     * or relation will be returned.
     * </pre>
     *
     * <code>.authzed.api.v1.ObjectReference resource = 2 [(.validate.rules) = {</code>
     */
    public function setResource(&$var)
    {
        GPBUtil::checkMessage($var, \Authzed\Api\V1\ObjectReference::class);
        $this->resource = $var;
    }

    /**
     * <pre>
     * permission is the name of the permission (or relation) for which to find
     * the subjects.
     * </pre>
     *
     * <code>string permission = 3 [(.validate.rules) = {</code>
     */
    public function getPermission()
    {
        return $this->permission;
    }

    /**
     * <pre>
     * permission is the name of the permission (or relation) for which to find
     * the subjects.
     * </pre>
     *
     * <code>string permission = 3 [(.validate.rules) = {</code>
     */
    public function setPermission($var)
    {
        GPBUtil::checkString($var, True);
        $this->permission = $var;
    }

    /**
     * <pre>
     * subject_object_type is the type of subject object for which the IDs will
     * be returned.
     * </pre>
     *
     * <code>string subject_object_type = 4 [(.validate.rules) = {</code>
     */
    public function getSubjectObjectType()
    {
        return $this->subject_object_type;
    }

    /**
     * <pre>
     * subject_object_type is the type of subject object for which the IDs will
     * be returned.
     * </pre>
     *
     * <code>string subject_object_type = 4 [(.validate.rules) = {</code>
     */
    public function setSubjectObjectType($var)
    {
        GPBUtil::checkString($var, True);
        $this->subject_object_type = $var;
    }

    /**
     * <pre>
     * optional_subject_relation is the optional relation for the subject.
     * </pre>
     *
     * <code>string optional_subject_relation = 5 [(.validate.rules) = {</code>
     */
    public function getOptionalSubjectRelation()
    {
        return $this->optional_subject_relation;
    }

    /**
     * <pre>
     * optional_subject_relation is the optional relation for the subject.
     * </pre>
     *
     * <code>string optional_subject_relation = 5 [(.validate.rules) = {</code>
     */
    public function setOptionalSubjectRelation($var)
    {
        GPBUtil::checkString($var, True);
        $this->optional_subject_relation = $var;
    }

}

