<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: permission_service.proto

namespace Authzed\Api\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * Precondition specifies how and the existence or absence of certain
 * relationships as expressed through the accompanying filter should affect
 * whether or not the operation proceeds.
 * MUST_NOT_MATCH will fail the parent request if any relationships match the
 * relationships filter.
 * MUST_MATCH will fail the parent request if there are no
 * relationships that match the filter.
 * </pre>
 *
 * Protobuf type <code>authzed.api.v1.Precondition</code>
 */
class Precondition extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>.authzed.api.v1.Precondition.Operation operation = 1 [(.validate.rules) = {</code>
     */
    private $operation = 0;
    /**
     * <code>.authzed.api.v1.RelationshipFilter filter = 2 [(.validate.rules) = {</code>
     */
    private $filter = null;

    public function __construct() {
        \GPBMetadata\PermissionService::initOnce();
        parent::__construct();
    }

    /**
     * <code>.authzed.api.v1.Precondition.Operation operation = 1 [(.validate.rules) = {</code>
     */
    public function getOperation()
    {
        return $this->operation;
    }

    /**
     * <code>.authzed.api.v1.Precondition.Operation operation = 1 [(.validate.rules) = {</code>
     */
    public function setOperation($var)
    {
        GPBUtil::checkEnum($var, \Authzed\Api\V1\Precondition_Operation::class);
        $this->operation = $var;
    }

    /**
     * <code>.authzed.api.v1.RelationshipFilter filter = 2 [(.validate.rules) = {</code>
     */
    public function getFilter()
    {
        return $this->filter;
    }

    /**
     * <code>.authzed.api.v1.RelationshipFilter filter = 2 [(.validate.rules) = {</code>
     */
    public function setFilter(&$var)
    {
        GPBUtil::checkMessage($var, \Authzed\Api\V1\RelationshipFilter::class);
        $this->filter = $var;
    }

}

