<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: permission_service.proto

namespace Authzed\Api\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * Consistency will define how a request is handled by the backend.
 * By defining a consistency requirement, and a token at which those
 * requirements should be applied, where applicable.
 * </pre>
 *
 * Protobuf type <code>authzed.api.v1.Consistency</code>
 */
class Consistency extends \Google\Protobuf\Internal\Message
{
    protected $requirement;

    public function __construct() {
        \GPBMetadata\PermissionService::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * minimize_latency indicates that the latency for the call should be
     * minimized by having the system select the fastest snapshot available.
     * </pre>
     *
     * <code>bool minimize_latency = 1 [(.validate.rules) = {</code>
     */
    public function getMinimizeLatency()
    {
        return $this->readOneof(1);
    }

    /**
     * <pre>
     * minimize_latency indicates that the latency for the call should be
     * minimized by having the system select the fastest snapshot available.
     * </pre>
     *
     * <code>bool minimize_latency = 1 [(.validate.rules) = {</code>
     */
    public function setMinimizeLatency($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(1, $var);
    }

    /**
     * <pre>
     * at_least_as_fresh indicates that all data used in the API call must be
     * *at least as fresh* as that found in the ZedToken; more recent data might
     * be used if available or faster.
     * </pre>
     *
     * <code>.authzed.api.v1.ZedToken at_least_as_fresh = 2;</code>
     */
    public function getAtLeastAsFresh()
    {
        return $this->readOneof(2);
    }

    /**
     * <pre>
     * at_least_as_fresh indicates that all data used in the API call must be
     * *at least as fresh* as that found in the ZedToken; more recent data might
     * be used if available or faster.
     * </pre>
     *
     * <code>.authzed.api.v1.ZedToken at_least_as_fresh = 2;</code>
     */
    public function setAtLeastAsFresh(&$var)
    {
        GPBUtil::checkMessage($var, \Authzed\Api\V1\ZedToken::class);
        $this->writeOneof(2, $var);
    }

    /**
     * <pre>
     * at_exact_snapshot indicates that all data used in the API call must be
     * *at the given* snapshot in time; if the snapshot is no longer available,
     * an error will be returned to the caller.
     * </pre>
     *
     * <code>.authzed.api.v1.ZedToken at_exact_snapshot = 3;</code>
     */
    public function getAtExactSnapshot()
    {
        return $this->readOneof(3);
    }

    /**
     * <pre>
     * at_exact_snapshot indicates that all data used in the API call must be
     * *at the given* snapshot in time; if the snapshot is no longer available,
     * an error will be returned to the caller.
     * </pre>
     *
     * <code>.authzed.api.v1.ZedToken at_exact_snapshot = 3;</code>
     */
    public function setAtExactSnapshot(&$var)
    {
        GPBUtil::checkMessage($var, \Authzed\Api\V1\ZedToken::class);
        $this->writeOneof(3, $var);
    }

    /**
     * <pre>
     * fully_consistent indicates that all data used in the API call *must* be
     * at the most recent snapshot found.
     * NOTE: using this method can be *quite slow*, so unless there is a need to
     * do so, it is recommended to use `at_least_as_fresh` with a stored
     * ZedToken.
     * </pre>
     *
     * <code>bool fully_consistent = 4 [(.validate.rules) = {</code>
     */
    public function getFullyConsistent()
    {
        return $this->readOneof(4);
    }

    /**
     * <pre>
     * fully_consistent indicates that all data used in the API call *must* be
     * at the most recent snapshot found.
     * NOTE: using this method can be *quite slow*, so unless there is a need to
     * do so, it is recommended to use `at_least_as_fresh` with a stored
     * ZedToken.
     * </pre>
     *
     * <code>bool fully_consistent = 4 [(.validate.rules) = {</code>
     */
    public function setFullyConsistent($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(4, $var);
    }

    public function getRequirement()
    {
        return $this->requirement;
    }

}

