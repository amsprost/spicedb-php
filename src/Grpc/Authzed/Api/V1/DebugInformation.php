<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: debug.proto

namespace Authzed\Api\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * DebugInformation defines debug information returned by an API call in a footer when
 * requested with a specific debugging header.
 * The specific debug information returned will depend on the type of the API call made.
 * See the github.com/authzed/authzed-go project for the specific header and footer names.
 * </pre>
 *
 * Protobuf type <code>authzed.api.v1.DebugInformation</code>
 */
class DebugInformation extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * check holds debug information about a check request.
     * </pre>
     *
     * <code>.authzed.api.v1.CheckDebugTrace check = 1;</code>
     */
    private $check = null;
    /**
     * <pre>
     * schema_used holds the schema used for the request.
     * </pre>
     *
     * <code>string schema_used = 2;</code>
     */
    private $schema_used = '';

    public function __construct() {
        \GPBMetadata\Debug::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * check holds debug information about a check request.
     * </pre>
     *
     * <code>.authzed.api.v1.CheckDebugTrace check = 1;</code>
     */
    public function getCheck()
    {
        return $this->check;
    }

    /**
     * <pre>
     * check holds debug information about a check request.
     * </pre>
     *
     * <code>.authzed.api.v1.CheckDebugTrace check = 1;</code>
     */
    public function setCheck(&$var)
    {
        GPBUtil::checkMessage($var, \Authzed\Api\V1\CheckDebugTrace::class);
        $this->check = $var;
    }

    /**
     * <pre>
     * schema_used holds the schema used for the request.
     * </pre>
     *
     * <code>string schema_used = 2;</code>
     */
    public function getSchemaUsed()
    {
        return $this->schema_used;
    }

    /**
     * <pre>
     * schema_used holds the schema used for the request.
     * </pre>
     *
     * <code>string schema_used = 2;</code>
     */
    public function setSchemaUsed($var)
    {
        GPBUtil::checkString($var, True);
        $this->schema_used = $var;
    }

}

