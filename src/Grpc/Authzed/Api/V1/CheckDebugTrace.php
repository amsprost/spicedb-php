<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: debug.proto

namespace Authzed\Api\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * CheckDebugTrace is a recursive trace of the requests made for resolving a CheckPermission
 * API call.
 * </pre>
 *
 * Protobuf type <code>authzed.api.v1.CheckDebugTrace</code>
 */
class CheckDebugTrace extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * resource holds the resource on which the Check was performed.
     * </pre>
     *
     * <code>.authzed.api.v1.ObjectReference resource = 1 [(.validate.rules) = {</code>
     */
    private $resource = null;
    /**
     * <pre>
     * permission holds the name of the permission or relation on which the Check was performed.
     * </pre>
     *
     * <code>string permission = 2;</code>
     */
    private $permission = '';
    /**
     * <pre>
     * permission_type holds information indicating whether it was a permission or relation.
     * </pre>
     *
     * <code>.authzed.api.v1.CheckDebugTrace.PermissionType permission_type = 3;</code>
     */
    private $permission_type = 0;
    /**
     * <pre>
     * subject holds the subject on which the Check was performed. This will be static across all calls within
     * the same Check tree.
     * </pre>
     *
     * <code>.authzed.api.v1.SubjectReference subject = 4 [(.validate.rules) = {</code>
     */
    private $subject = null;
    /**
     * <pre>
     * result holds the result of the Check call.
     * </pre>
     *
     * <code>.authzed.api.v1.CheckDebugTrace.Permissionship result = 5;</code>
     */
    private $result = 0;
    protected $resolution;

    public function __construct() {
        \GPBMetadata\Debug::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * resource holds the resource on which the Check was performed.
     * </pre>
     *
     * <code>.authzed.api.v1.ObjectReference resource = 1 [(.validate.rules) = {</code>
     */
    public function getResource()
    {
        return $this->resource;
    }

    /**
     * <pre>
     * resource holds the resource on which the Check was performed.
     * </pre>
     *
     * <code>.authzed.api.v1.ObjectReference resource = 1 [(.validate.rules) = {</code>
     */
    public function setResource(&$var)
    {
        GPBUtil::checkMessage($var, \Authzed\Api\V1\ObjectReference::class);
        $this->resource = $var;
    }

    /**
     * <pre>
     * permission holds the name of the permission or relation on which the Check was performed.
     * </pre>
     *
     * <code>string permission = 2;</code>
     */
    public function getPermission()
    {
        return $this->permission;
    }

    /**
     * <pre>
     * permission holds the name of the permission or relation on which the Check was performed.
     * </pre>
     *
     * <code>string permission = 2;</code>
     */
    public function setPermission($var)
    {
        GPBUtil::checkString($var, True);
        $this->permission = $var;
    }

    /**
     * <pre>
     * permission_type holds information indicating whether it was a permission or relation.
     * </pre>
     *
     * <code>.authzed.api.v1.CheckDebugTrace.PermissionType permission_type = 3;</code>
     */
    public function getPermissionType()
    {
        return $this->permission_type;
    }

    /**
     * <pre>
     * permission_type holds information indicating whether it was a permission or relation.
     * </pre>
     *
     * <code>.authzed.api.v1.CheckDebugTrace.PermissionType permission_type = 3;</code>
     */
    public function setPermissionType($var)
    {
        GPBUtil::checkEnum($var, \Authzed\Api\V1\CheckDebugTrace_PermissionType::class);
        $this->permission_type = $var;
    }

    /**
     * <pre>
     * subject holds the subject on which the Check was performed. This will be static across all calls within
     * the same Check tree.
     * </pre>
     *
     * <code>.authzed.api.v1.SubjectReference subject = 4 [(.validate.rules) = {</code>
     */
    public function getSubject()
    {
        return $this->subject;
    }

    /**
     * <pre>
     * subject holds the subject on which the Check was performed. This will be static across all calls within
     * the same Check tree.
     * </pre>
     *
     * <code>.authzed.api.v1.SubjectReference subject = 4 [(.validate.rules) = {</code>
     */
    public function setSubject(&$var)
    {
        GPBUtil::checkMessage($var, \Authzed\Api\V1\SubjectReference::class);
        $this->subject = $var;
    }

    /**
     * <pre>
     * result holds the result of the Check call.
     * </pre>
     *
     * <code>.authzed.api.v1.CheckDebugTrace.Permissionship result = 5;</code>
     */
    public function getResult()
    {
        return $this->result;
    }

    /**
     * <pre>
     * result holds the result of the Check call.
     * </pre>
     *
     * <code>.authzed.api.v1.CheckDebugTrace.Permissionship result = 5;</code>
     */
    public function setResult($var)
    {
        GPBUtil::checkEnum($var, \Authzed\Api\V1\CheckDebugTrace_Permissionship::class);
        $this->result = $var;
    }

    /**
     * <pre>
     * was_cached_result, if true, indicates that the result was found in the cache and returned directly.
     * </pre>
     *
     * <code>bool was_cached_result = 6;</code>
     */
    public function getWasCachedResult()
    {
        return $this->readOneof(6);
    }

    /**
     * <pre>
     * was_cached_result, if true, indicates that the result was found in the cache and returned directly.
     * </pre>
     *
     * <code>bool was_cached_result = 6;</code>
     */
    public function setWasCachedResult($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(6, $var);
    }

    /**
     * <pre>
     * sub_problems holds the sub problems that were executed to resolve the answer to this Check. An empty list
     * and a permissionship of PERMISSIONSHIP_HAS_PERMISSION indicates the subject was found within this relation.
     * </pre>
     *
     * <code>.authzed.api.v1.CheckDebugTrace.SubProblems sub_problems = 7;</code>
     */
    public function getSubProblems()
    {
        return $this->readOneof(7);
    }

    /**
     * <pre>
     * sub_problems holds the sub problems that were executed to resolve the answer to this Check. An empty list
     * and a permissionship of PERMISSIONSHIP_HAS_PERMISSION indicates the subject was found within this relation.
     * </pre>
     *
     * <code>.authzed.api.v1.CheckDebugTrace.SubProblems sub_problems = 7;</code>
     */
    public function setSubProblems(&$var)
    {
        GPBUtil::checkMessage($var, \Authzed\Api\V1\CheckDebugTrace_SubProblems::class);
        $this->writeOneof(7, $var);
    }

    public function getResolution()
    {
        return $this->resolution;
    }

}

