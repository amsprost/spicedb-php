<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: debug.proto

namespace Authzed\Api\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * CheckDebugTrace is a recursive trace of the requests made for resolving a CheckPermission
 * API call.
 *
 * Generated from protobuf message <code>authzed.api.v1.CheckDebugTrace</code>
 */
class CheckDebugTrace extends \Google\Protobuf\Internal\Message
{
    /**
     * resource holds the resource on which the Check was performed.
     *
     * Generated from protobuf field <code>.authzed.api.v1.ObjectReference resource = 1 [(.validate.rules) = {</code>
     */
    protected $resource = null;
    /**
     * permission holds the name of the permission or relation on which the Check was performed.
     *
     * Generated from protobuf field <code>string permission = 2;</code>
     */
    protected $permission = '';
    /**
     * permission_type holds information indicating whether it was a permission or relation.
     *
     * Generated from protobuf field <code>.authzed.api.v1.CheckDebugTrace.PermissionType permission_type = 3;</code>
     */
    protected $permission_type = 0;
    /**
     * subject holds the subject on which the Check was performed. This will be static across all calls within
     * the same Check tree.
     *
     * Generated from protobuf field <code>.authzed.api.v1.SubjectReference subject = 4 [(.validate.rules) = {</code>
     */
    protected $subject = null;
    /**
     * result holds the result of the Check call.
     *
     * Generated from protobuf field <code>.authzed.api.v1.CheckDebugTrace.Permissionship result = 5;</code>
     */
    protected $result = 0;
    protected $resolution;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Authzed\Api\V1\ObjectReference $resource
     *           resource holds the resource on which the Check was performed.
     *     @type string $permission
     *           permission holds the name of the permission or relation on which the Check was performed.
     *     @type int $permission_type
     *           permission_type holds information indicating whether it was a permission or relation.
     *     @type \Authzed\Api\V1\SubjectReference $subject
     *           subject holds the subject on which the Check was performed. This will be static across all calls within
     *           the same Check tree.
     *     @type int $result
     *           result holds the result of the Check call.
     *     @type bool $was_cached_result
     *           was_cached_result, if true, indicates that the result was found in the cache and returned directly.
     *     @type \Authzed\Api\V1\CheckDebugTrace\SubProblems $sub_problems
     *           sub_problems holds the sub problems that were executed to resolve the answer to this Check. An empty list
     *           and a permissionship of PERMISSIONSHIP_HAS_PERMISSION indicates the subject was found within this relation.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Debug::initOnce();
        parent::__construct($data);
    }

    /**
     * resource holds the resource on which the Check was performed.
     *
     * Generated from protobuf field <code>.authzed.api.v1.ObjectReference resource = 1 [(.validate.rules) = {</code>
     * @return \Authzed\Api\V1\ObjectReference|null
     */
    public function getResource()
    {
        return $this->resource;
    }

    public function hasResource()
    {
        return isset($this->resource);
    }

    public function clearResource()
    {
        unset($this->resource);
    }

    /**
     * resource holds the resource on which the Check was performed.
     *
     * Generated from protobuf field <code>.authzed.api.v1.ObjectReference resource = 1 [(.validate.rules) = {</code>
     * @param \Authzed\Api\V1\ObjectReference $var
     * @return $this
     */
    public function setResource($var)
    {
        GPBUtil::checkMessage($var, \Authzed\Api\V1\ObjectReference::class);
        $this->resource = $var;

        return $this;
    }

    /**
     * permission holds the name of the permission or relation on which the Check was performed.
     *
     * Generated from protobuf field <code>string permission = 2;</code>
     * @return string
     */
    public function getPermission()
    {
        return $this->permission;
    }

    /**
     * permission holds the name of the permission or relation on which the Check was performed.
     *
     * Generated from protobuf field <code>string permission = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setPermission($var)
    {
        GPBUtil::checkString($var, True);
        $this->permission = $var;

        return $this;
    }

    /**
     * permission_type holds information indicating whether it was a permission or relation.
     *
     * Generated from protobuf field <code>.authzed.api.v1.CheckDebugTrace.PermissionType permission_type = 3;</code>
     * @return int
     */
    public function getPermissionType()
    {
        return $this->permission_type;
    }

    /**
     * permission_type holds information indicating whether it was a permission or relation.
     *
     * Generated from protobuf field <code>.authzed.api.v1.CheckDebugTrace.PermissionType permission_type = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setPermissionType($var)
    {
        GPBUtil::checkEnum($var, \Authzed\Api\V1\CheckDebugTrace\PermissionType::class);
        $this->permission_type = $var;

        return $this;
    }

    /**
     * subject holds the subject on which the Check was performed. This will be static across all calls within
     * the same Check tree.
     *
     * Generated from protobuf field <code>.authzed.api.v1.SubjectReference subject = 4 [(.validate.rules) = {</code>
     * @return \Authzed\Api\V1\SubjectReference|null
     */
    public function getSubject()
    {
        return $this->subject;
    }

    public function hasSubject()
    {
        return isset($this->subject);
    }

    public function clearSubject()
    {
        unset($this->subject);
    }

    /**
     * subject holds the subject on which the Check was performed. This will be static across all calls within
     * the same Check tree.
     *
     * Generated from protobuf field <code>.authzed.api.v1.SubjectReference subject = 4 [(.validate.rules) = {</code>
     * @param \Authzed\Api\V1\SubjectReference $var
     * @return $this
     */
    public function setSubject($var)
    {
        GPBUtil::checkMessage($var, \Authzed\Api\V1\SubjectReference::class);
        $this->subject = $var;

        return $this;
    }

    /**
     * result holds the result of the Check call.
     *
     * Generated from protobuf field <code>.authzed.api.v1.CheckDebugTrace.Permissionship result = 5;</code>
     * @return int
     */
    public function getResult()
    {
        return $this->result;
    }

    /**
     * result holds the result of the Check call.
     *
     * Generated from protobuf field <code>.authzed.api.v1.CheckDebugTrace.Permissionship result = 5;</code>
     * @param int $var
     * @return $this
     */
    public function setResult($var)
    {
        GPBUtil::checkEnum($var, \Authzed\Api\V1\CheckDebugTrace\Permissionship::class);
        $this->result = $var;

        return $this;
    }

    /**
     * was_cached_result, if true, indicates that the result was found in the cache and returned directly.
     *
     * Generated from protobuf field <code>bool was_cached_result = 6;</code>
     * @return bool
     */
    public function getWasCachedResult()
    {
        return $this->readOneof(6);
    }

    public function hasWasCachedResult()
    {
        return $this->hasOneof(6);
    }

    /**
     * was_cached_result, if true, indicates that the result was found in the cache and returned directly.
     *
     * Generated from protobuf field <code>bool was_cached_result = 6;</code>
     * @param bool $var
     * @return $this
     */
    public function setWasCachedResult($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(6, $var);

        return $this;
    }

    /**
     * sub_problems holds the sub problems that were executed to resolve the answer to this Check. An empty list
     * and a permissionship of PERMISSIONSHIP_HAS_PERMISSION indicates the subject was found within this relation.
     *
     * Generated from protobuf field <code>.authzed.api.v1.CheckDebugTrace.SubProblems sub_problems = 7;</code>
     * @return \Authzed\Api\V1\CheckDebugTrace\SubProblems|null
     */
    public function getSubProblems()
    {
        return $this->readOneof(7);
    }

    public function hasSubProblems()
    {
        return $this->hasOneof(7);
    }

    /**
     * sub_problems holds the sub problems that were executed to resolve the answer to this Check. An empty list
     * and a permissionship of PERMISSIONSHIP_HAS_PERMISSION indicates the subject was found within this relation.
     *
     * Generated from protobuf field <code>.authzed.api.v1.CheckDebugTrace.SubProblems sub_problems = 7;</code>
     * @param \Authzed\Api\V1\CheckDebugTrace\SubProblems $var
     * @return $this
     */
    public function setSubProblems($var)
    {
        GPBUtil::checkMessage($var, \Authzed\Api\V1\CheckDebugTrace\SubProblems::class);
        $this->writeOneof(7, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getResolution()
    {
        return $this->whichOneof("resolution");
    }

}

