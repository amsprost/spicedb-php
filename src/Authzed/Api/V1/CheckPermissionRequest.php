<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: permission_service.proto

namespace Authzed\Api\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * CheckPermissionRequest issues a check on whether a subject has a permission
 * or is a member of a relation, on a specific resource.
 *
 * Generated from protobuf message <code>authzed.api.v1.CheckPermissionRequest</code>
 */
class CheckPermissionRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>.authzed.api.v1.Consistency consistency = 1;</code>
     */
    protected $consistency = null;
    /**
     * resource is the resource on which to check the permission or relation.
     *
     * Generated from protobuf field <code>.authzed.api.v1.ObjectReference resource = 2 [(.validate.rules) = {</code>
     */
    protected $resource = null;
    /**
     * permission is the name of the permission (or relation) on which to execute
     * the check.
     *
     * Generated from protobuf field <code>string permission = 3 [(.validate.rules) = {</code>
     */
    protected $permission = '';
    /**
     * subject is the subject that will be checked for the permission or relation.
     *
     * Generated from protobuf field <code>.authzed.api.v1.SubjectReference subject = 4 [(.validate.rules) = {</code>
     */
    protected $subject = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Authzed\Api\V1\Consistency $consistency
     *     @type \Authzed\Api\V1\ObjectReference $resource
     *           resource is the resource on which to check the permission or relation.
     *     @type string $permission
     *           permission is the name of the permission (or relation) on which to execute
     *           the check.
     *     @type \Authzed\Api\V1\SubjectReference $subject
     *           subject is the subject that will be checked for the permission or relation.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\PermissionService::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>.authzed.api.v1.Consistency consistency = 1;</code>
     * @return \Authzed\Api\V1\Consistency|null
     */
    public function getConsistency()
    {
        return $this->consistency;
    }

    public function hasConsistency()
    {
        return isset($this->consistency);
    }

    public function clearConsistency()
    {
        unset($this->consistency);
    }

    /**
     * Generated from protobuf field <code>.authzed.api.v1.Consistency consistency = 1;</code>
     * @param \Authzed\Api\V1\Consistency $var
     * @return $this
     */
    public function setConsistency($var)
    {
        GPBUtil::checkMessage($var, \Authzed\Api\V1\Consistency::class);
        $this->consistency = $var;

        return $this;
    }

    /**
     * resource is the resource on which to check the permission or relation.
     *
     * Generated from protobuf field <code>.authzed.api.v1.ObjectReference resource = 2 [(.validate.rules) = {</code>
     * @return \Authzed\Api\V1\ObjectReference|null
     */
    public function getResource()
    {
        return $this->resource;
    }

    public function hasResource()
    {
        return isset($this->resource);
    }

    public function clearResource()
    {
        unset($this->resource);
    }

    /**
     * resource is the resource on which to check the permission or relation.
     *
     * Generated from protobuf field <code>.authzed.api.v1.ObjectReference resource = 2 [(.validate.rules) = {</code>
     * @param \Authzed\Api\V1\ObjectReference $var
     * @return $this
     */
    public function setResource($var)
    {
        GPBUtil::checkMessage($var, \Authzed\Api\V1\ObjectReference::class);
        $this->resource = $var;

        return $this;
    }

    /**
     * permission is the name of the permission (or relation) on which to execute
     * the check.
     *
     * Generated from protobuf field <code>string permission = 3 [(.validate.rules) = {</code>
     * @return string
     */
    public function getPermission()
    {
        return $this->permission;
    }

    /**
     * permission is the name of the permission (or relation) on which to execute
     * the check.
     *
     * Generated from protobuf field <code>string permission = 3 [(.validate.rules) = {</code>
     * @param string $var
     * @return $this
     */
    public function setPermission($var)
    {
        GPBUtil::checkString($var, True);
        $this->permission = $var;

        return $this;
    }

    /**
     * subject is the subject that will be checked for the permission or relation.
     *
     * Generated from protobuf field <code>.authzed.api.v1.SubjectReference subject = 4 [(.validate.rules) = {</code>
     * @return \Authzed\Api\V1\SubjectReference|null
     */
    public function getSubject()
    {
        return $this->subject;
    }

    public function hasSubject()
    {
        return isset($this->subject);
    }

    public function clearSubject()
    {
        unset($this->subject);
    }

    /**
     * subject is the subject that will be checked for the permission or relation.
     *
     * Generated from protobuf field <code>.authzed.api.v1.SubjectReference subject = 4 [(.validate.rules) = {</code>
     * @param \Authzed\Api\V1\SubjectReference $var
     * @return $this
     */
    public function setSubject($var)
    {
        GPBUtil::checkMessage($var, \Authzed\Api\V1\SubjectReference::class);
        $this->subject = $var;

        return $this;
    }

}

