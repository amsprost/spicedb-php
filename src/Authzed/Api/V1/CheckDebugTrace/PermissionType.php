<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: debug.proto

namespace Authzed\Api\V1\CheckDebugTrace;

use UnexpectedValueException;

/**
 * Protobuf type <code>authzed.api.v1.CheckDebugTrace.PermissionType</code>
 */
class PermissionType
{
    /**
     * Generated from protobuf enum <code>PERMISSION_TYPE_UNSPECIFIED = 0;</code>
     */
    const PERMISSION_TYPE_UNSPECIFIED = 0;
    /**
     * Generated from protobuf enum <code>PERMISSION_TYPE_RELATION = 1;</code>
     */
    const PERMISSION_TYPE_RELATION = 1;
    /**
     * Generated from protobuf enum <code>PERMISSION_TYPE_PERMISSION = 2;</code>
     */
    const PERMISSION_TYPE_PERMISSION = 2;

    private static $valueToName = [
        self::PERMISSION_TYPE_UNSPECIFIED => 'PERMISSION_TYPE_UNSPECIFIED',
        self::PERMISSION_TYPE_RELATION => 'PERMISSION_TYPE_RELATION',
        self::PERMISSION_TYPE_PERMISSION => 'PERMISSION_TYPE_PERMISSION',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(PermissionType::class, \Authzed\Api\V1\CheckDebugTrace_PermissionType::class);

